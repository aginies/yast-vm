/**
 * File:
 *   include/vm/cmdline.ycp
 *
 * Summary:
 *   Command line interface functions
 *
 * Authors:
 *   Ladislav Slezak <lslezak@suse.cz>
 *   Michael G. Fritch <mgfritch@novell.com>
 *
 * $Id$
 *
 * Handlers for command line mode.
 *
 */

{
    import "Progress";
    import "Wizard";
    import "GetInstArgs";
    import "VM";
    import "VM_Common";
    import "Mode";
    import "Sequencer";
    import "CommandLine";
    import "ProductControl";
    import "Stage";
    import "Report";

    textdomain "vm";


    define symbol manage() {
	return (symbol)WFM::CallFunction ("inst_vm_manage", [false, true]);
    }


    define symbol select_create() {
	return (symbol)WFM::CallFunction ("inst_xen_create", [true, true]);
    }


    define symbol proposal() {
	string proposal_type = sformat("%1_%2", VM::GetVMMtype(), VM_Common::proposal_type);
	symbol retval = (symbol)WFM::CallFunction ("inst_proposal",
		    [GetInstArgs::ButtonsProposal(true, true, proposal_type)]);

	if (retval == `back) {
		return `forceback;
	}
	return retval;
    }


    define symbol start() {

	if (!Mode::config()) {
		return (symbol)WFM::CallFunction("inst_vm_kickoff", [false, false]);
	}
	else {
		// save the current settings into the AutoYaST profile settings
		VM_Common::autoyast_profile_settings[VM_Common::proposal_type] = VM::SubExport();
	}

	return `next;
    }


    define symbol prepare(string new_proposal_type) {
	// set the proposal_type
	VM_Common::proposal_type = new_proposal_type;

	// reset the appropriate proposal settings
	if (VM_Common::proposal_type == "boot") {
		VM::ResetSource();
		VM::ResetExtraArgs();
		if (!Mode::config()) {
			//load the saved AutoYaST profile settings
			VM::Import(VM_Common::autoyast_profile_settings);
		}
	}
	else {
		VM::ResetAllSettings();
	}

	return `next;
    }


    // command line mode - installation start handler
    define boolean start_installation(map options)
    {
	y2milestone("Command line 'install' options: %1", options);

	// display the console during installation?
	VM_Common::display_console = haskey(options, "display");

	// set the options
	string autoyast = options["autoyast"]:"";
	if (autoyast != "")
	{

	    // prepare for installation
	    prepare("install");

	    import "Profile";

	    if (!Profile::ReadXML(autoyast))
	    {
		// error message
		Report::Error(_("Cannot load the profile in
the current system. It may be broken."));
		return false;
	    }
	    else
	    {
		y2milestone("Loaded AutoYaST profile: %1", Profile::current);

		// import VM config
		map xen_setting = Profile::current["xen"]:$[];

		if (xen_setting != nil && xen_setting != $[])
		{
		    y2milestone("Import settings: %1", xen_setting);
		    VM::Import(xen_setting);
		}
		else
		{
		    // error message
		    Report::Error(_("Autoyast profile '%1' does not contain virtual machine parameters."));
		    return false;
		}

		// set autoyast profile
		VM::SetAutoYastProfile(autoyast);
	    }
	}
	else
	{
	    // error message - an Autoyast profile is mandatory
	    CommandLine::Error(_("Option 'autoyast' is missing, an Autoyast profile is required."));
	    return false;
	}

	// log the current configuration
	VM::Export();

	// generate missing (empty) configuration options
	VM::SetEmptyOptions();

	string configuration_name = VM::GetConfigName();
	if (!VM::ValidateConfigName(configuration_name))
	{
	    Report::Error(sformat(_("Configuration name '%1' is already in use"), configuration_name));
	    return false;
	}

	// progress message, %1 is name of the virtual machine (e.g. vm1)
	CommandLine::PrintVerbose(sformat(_("Installing virtual machine '%1'"), configuration_name));

	// start the VM
	symbol started = start();
	y2milestone("VM result: %1", started);

	if (started != `next)
	{
	    // command line - error message
	    CommandLine::Print(_("Aborted."));
	    return false;
	}

	// start the 2nd stage
	prepare("boot");

	// start the 2nd stage
	started = start();

	if (started != `next)
	{
	    // command line - error message
	    CommandLine::Print(_("Aborted."));
	    return false;
	}

	return true;
    }

    // this dummy handler is required to print "saved changes" in command line (verbose) mode
    define boolean DummyHandler()
    {
	return true;
    }


    define symbol GUIhandler() {
	// create initial dialog
	Wizard::CreateDialog();
	Wizard::SetDesktopIcon ("vm");

	map aliases = $[
		"manage"		: ``(manage()), // manage virtual machines
		"select_create"		: ``(select_create()), // creation options
		"install_prepare"	: ``(prepare("install")), // change proposal_type to install and reset the proposal settings.
		"install_proposal"	: ``(proposal()), // install options
		"install_start"		: ``(start()), // start vm install
		"boot_prepare"		: ``(prepare("boot")), // change proposal_type to boot and reset the proposal settings.
		"boot_proposal"		: ``(proposal()), // boot options
		"boot_start"		: ``(start()), // boot vm and display feedback dialog
		"existing_prepare"	: ``(prepare("existing")), // change proposal_type to existing and reset the proposal settings.
		"existing_proposal"	: ``(proposal()), // existing vm install options
		"existing_start"	: ``(start()), // boot vm and display feedback dialog
	    ];

	boolean isAutoinstallation = false;
	if (Mode::config()) { // running inside of autoinstallation wizard (AutoYaST)
		isAutoinstallation = true;
	}

	map sequence = $[
		"ws_start"		: (isAutoinstallation) ? "install_prepare" : "manage",
		"manage"		:
		    $[
			`close		: `finish,
			`add		: "select_create",
			`next		: `next,
			`finish		: `finish,
			`abort		: `abort,
		    ],
		"select_create"		:
		    $[
			`install	: "install_prepare",
			`existing	: "existing_prepare",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		    ],
		"install_prepare"	:
		    $[
			`forceback	: (isAutoinstallation) ? `back : "select_create",
			`next		: "install_proposal",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		    ],
		"install_proposal"	:
		    $[
			`forceback	: (isAutoinstallation) ? `back : "select_create",
			`next		: "install_start",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		    ],
		"install_start"		:
		    $[
			`forceback	: "install_proposal",
			`next		: "boot_prepare",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		    ],
		"boot_prepare"		:
		    $[
			`forceback	: "install_prepare",
			`next		: "boot_proposal",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		     ],
		"boot_proposal"		:
		    $[
		        `forceback	: "install_prepare",
			`next		: "boot_start",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		    ],
		"boot_start"		:
		    $[
			`forceback	: "boot_proposal",
			`again		: "select_create",
			`next		: (isAutoinstallation) ? `next : "manage",
			`finish		: (isAutoinstallation) ? `finish : "manage",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		    ],
		"existing_prepare"	:
		    $[
			`forceback	: "select_create",
			`next		: "existing_proposal",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		    ],
		"existing_proposal"	:
		    $[
			`forceback	: "select_create",
			`next		: "existing_start",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		    ],
		"existing_start"	:
		    $[
			`forceback	: "existing_proposal",
			`again		: "select_create",
			`next		: (isAutoinstallation) ? `next : "manage",
			`finish		: (isAutoinstallation) ? `finish : "manage",
			`abort		: (isAutoinstallation) ? `abort : "manage",
		    ]
	];

	y2milestone("sequence: %1", sequence);

	symbol ret = Sequencer::Run(aliases, sequence);

	Wizard::CloseDialog();

	return ret;
    }
}

