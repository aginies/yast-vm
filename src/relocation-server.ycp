/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	clients/relocation-server.ycp
 * Package:	Configuration of relocation-server
 * Summary:	Main file
 * Authors:	Li Dongyang <lidongyang@novell.com>
 *
 * $Id: relocation-server.ycp 27914 2006-02-13 14:32:08Z locilka $
 *
 * Main file for relocation-server configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of relocation-server</h3>
 */

textdomain "relocation-server";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("RelocationServer module started");

import "Progress";
import "Report";
import "Summary";
import "VM_XEN";
import "Arch";

import "CommandLine";
include "relocation-server/wizards.ycp";

// check whether VM can be started
boolean CheckConfiguration() {

    boolean ret = true;

    // check whether VM can be started (cannot start a vm using UML)
    if ( VM_XEN::isUML() ) return false;

    y2milestone("Checking for Xen installation");

    // check the dom0 configuration...
    ret = ret && VM_XEN::ConfigureDom0();
    if (ret == false) return false;

    y2milestone("CheckConfiguration returned: %1", ret);
    return ret;
}


map cmdline_description = $[
    "id" 	: "relocation-server",
    /* Command line help text for the relocation-server module */
    "help"	: _("Configuration of relocation-server"),
    "guihandler"        : RelocationServerSequence,
    "initialize"        : RelocationServer::Read,
    "finish"            : RelocationServer::Write,
];

if ( !Arch::is_kvm() && !Arch::is_xen0() ) {
    y2milestone("No hypervisor found, offer to install one");
    cmdline_description["guihandler"] = CheckConfiguration;
    remove(cmdline_description, "initialize");
    remove(cmdline_description, "finish");
}

/* main ui function */
any ret = nil;

ret = CommandLine::Run(cmdline_description);
y2debug("ret=%1", ret);

/* Finish */
y2milestone("RelocationServer module finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
