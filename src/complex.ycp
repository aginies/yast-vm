/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/relocation-server/complex.ycp
 * Package:	Configuration of relocation-server
 * Summary:	Dialogs definitions
 * Authors:	Li Dongyang <lidongyang@novell.com>
 *
 * $Id: complex.ycp 41350 2007-10-10 16:59:00Z dfiser $
 */

{

textdomain "relocation-server";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "CWMFirewallInterfaces";
import "RelocationServer";


include "relocation-server/helps.ycp";

boolean ReallyExit () {
    // yes-no popup
    return Popup::YesNo (_("Really exit?
All changes will be lost."));
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    Wizard::SetTitleIcon("yast-vm-install");
    // RelocationServer::SetAbortFunction(PollAbort);
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = RelocationServer::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    Wizard::SetTitleIcon("yast-vm-install");
    // RelocationServer::SetAbortFunction(PollAbort);
    boolean ret = RelocationServer::Write();
    return ret ? `next : `abort;
}

void InitGlobalState() {
    boolean server_stat = (boolean) UI::QueryWidget(`id("xend-relocation-server"), `Value);
    boolean ssl_server_stat = (boolean) UI::QueryWidget(`id("xend-relocation-ssl-server"), `Value);
    boolean stat = server_stat || ssl_server_stat;
    UI::ChangeWidget (`id("xend-relocation-address"), `Enabled, stat);
    UI::ChangeWidget (`id("xend-relocation-hosts-allow"), `Enabled, stat);
    if (stat)
        CWMFirewallInterfaces::EnableOpenFirewallWidget ();
    else
        CWMFirewallInterfaces::DisableOpenFirewallWidget ();
    stat = server_stat && ssl_server_stat;
    UI::ChangeWidget (`id("xend-relocation-ssl"), `Enabled, stat);
}

void InitServerState() {
    boolean stat = (boolean) UI::QueryWidget(`id("xend-relocation-server"), `Value);
    UI::ChangeWidget (`id("xend-relocation-port"), `Enabled, stat);
    InitGlobalState();
}

void InitSSLServerState() {
    boolean stat = (boolean) UI::QueryWidget(`id("xend-relocation-ssl-server"), `Value);
    UI::ChangeWidget (`id("xend-relocation-ssl-port"), `Enabled, stat);
    UI::ChangeWidget (`id("xend-relocation-server-ssl-key-file"), `Enabled, stat);
    UI::ChangeWidget (`id("xend-relocation-server-ssl-cert-file"), `Enabled, stat);
    UI::ChangeWidget (`id("browse_ssl_key_file"), `Enabled, stat);
    UI::ChangeWidget (`id("browse_ssl_cert_file"), `Enabled, stat);
    InitGlobalState();
}

void InitXendConfigurationDialog (string id) {
    foreach (string key, ["xend-relocation-server",
                        "xend-relocation-ssl-server",
                        "xend-relocation-ssl"], {
    UI::ChangeWidget(`id(key), `Value, (RelocationServer::GetXendOption(key) == "yes"));
    });

    foreach (string key, ["xend-relocation-server-ssl-key-file",
                        "xend-relocation-server-ssl-cert-file",
                        "xend-relocation-address",
                        "xend-relocation-hosts-allow"], {
    UI::ChangeWidget(`id(key), `Value, RelocationServer::GetXendOption(key));
    });

    foreach (string key, ["xend-relocation-port", "xend-relocation-ssl-port"], {
    UI::ChangeWidget(`id(key), `Value, tointeger(RelocationServer::GetXendOption(key)));
    });

    InitServerState();
    InitSSLServerState();
}

symbol HandleXendConfigurationDialog (string id, map event) {
    any action = event["ID"]:nil;

    if (action == "browse_ssl_key_file") {
        string new_filename = UI::AskForExistingFile("", "", _("Select SSL Key File"));
        if (new_filename != nil && new_filename != "") {
        UI::ChangeWidget (`id("xend-relocation-server-ssl-key-file"), `Value, new_filename);
        }
    } else if (action == "browse_ssl_cert_file") {
        string new_filename = UI::AskForExistingFile("", "", _("Select SSL Cert File"));
        if (new_filename != nil && new_filename != "") {
        UI::ChangeWidget (`id("xend-relocation-server-ssl-cert-file"), `Value, new_filename);
        }
    } else if (action == "xend-relocation-server") {
        InitServerState();
    } else if (action == "xend-relocation-ssl-server") {
        InitSSLServerState();
    }
    return nil;
}

void StoreXendConfigurationDialog (string id, map event) {
    RelocationServer::SetModified();

    foreach (string key, ["xend-relocation-server",
                        "xend-relocation-ssl-server",
                        "xend-relocation-ssl"], {
    string value = ((boolean)UI::QueryWidget(`id(key), `Value) == true) ? "yes":"no";
    if (value != RelocationServer::GetXendOption(key))
        RelocationServer::SetXendOption(key, value);
    });

    foreach (string key, ["xend-relocation-server-ssl-key-file",
                        "xend-relocation-server-ssl-cert-file",
                        "xend-relocation-address",
                        "xend-relocation-hosts-allow",
                        "xend-relocation-port",
                        "xend-relocation-ssl-port"], {
    string value = tostring(UI::QueryWidget(`id(key), `Value));
    if (value != RelocationServer::GetXendOption(key))
        RelocationServer::SetXendOption(key, tostring(UI::QueryWidget(`id(key), `Value)));
    });
}

void InitKVMFireWall() {
    boolean tunneled_migration = (boolean) UI::QueryWidget(`id("tunneled_migration"), `Value);
    boolean plain_migration = (boolean) UI::QueryWidget(`id("plain_migration"), `Value);
    if (tunneled_migration || plain_migration)
        CWMFirewallInterfaces::EnableOpenFirewallWidget ();
    else
        CWMFirewallInterfaces::DisableOpenFirewallWidget ();
}

void InitLibvirtdPortsTable () {
    list <string> ports = RelocationServer::GetLibVirtdPorts();
    boolean stat = (boolean) UI::QueryWidget(`id("plain_migration"), `Value);

    if (ports != nil && ports != []) {
    list <term> items = [];
    foreach (string port, ports, {
        items = add (items, `item(`id(port), port));
    });

    // Redraw table of ports and enable modification buttons
    UI::ChangeWidget(`id("Port"), `Items, items);
    UI::ChangeWidget(`id("edit_port"), `Enabled, true && stat);
    UI::ChangeWidget(`id("delete_port"), `Enabled, true && stat);
    } else {
    // Redraw table of ports and disable modification buttons
    UI::ChangeWidget(`id("Port"), `Items, []);
    UI::ChangeWidget(`id("edit_port"), `Enabled, false);
    UI::ChangeWidget(`id("delete_port"), `Enabled, false);
    }

    UI::ChangeWidget (`id("Port"), `Enabled, stat);
    UI::ChangeWidget (`id("add_port"), `Enabled, stat);
    UI::ChangeWidget (`id("default_port_range"), `Enabled, stat);
}

void InitKVMConfigurationDialog (string id) {
    UI::ChangeWidget (`id("tunneled_migration"), `Value, false);
    UI::ChangeWidget (`id("plain_migration"), `Value, false);
    UI::ChangeWidget (`id("default_port_range"), `Value, true);
    InitLibvirtdPortsTable();
    InitKVMFireWall();
}

void DeletePort (string port) {
    list <string> ports = RelocationServer::GetLibVirtdPorts();
    ports = filter(string s, ports, {return (s != port);});
    RelocationServer::SetLibvirtdPorts(ports);
}

void AddEditPortDialog (string current_port) {
    UI::OpenDialog(`opt(`decorated), `VBox(
    `MinWidth (30,
        `HBox(
        `HSpacing(1),
        `Frame(
            (current_port == nil ?
            /* A popup dialog caption */
            _("Add New Port")
            :
            /* A popup dialog caption */
            _("Edit Current Port")),
            /* A text entry */
            `TextEntry(`id("port_number"), _("&Port"), (current_port == nil ? "":current_port))
        ),
        `HSpacing(1)
        )
    ),
    `VSpacing(1),
    `ButtonBox(
        `PushButton(`id(`ok), Label::OKButton()),
        `PushButton(`id(`cancel), Label::CancelButton())
    )
    ));

    UI::ChangeWidget( `id("port_number"), `ValidChars, "0123456789");

    any ret = nil;
    while (true) {
    ret = UI::UserInput();
    if (ret == `ok) {
        string new_port = (string) UI::QueryWidget(`id("port_number"), `Value);

        if (new_port == "") {
        UI::SetFocus(`id("port_number"));
        Report::Error(_("Port number must not be empty."));
        continue;
        }

        if (tointeger(new_port) > 65535 || tointeger(new_port) < 1) {
        UI::SetFocus(`id("port_number"));
        Report::Error(_("Port number out of range."));
        continue;
        }

        list <string> ports = RelocationServer::GetLibVirtdPorts();
        if (contains(ports, new_port)) {
        UI::SetFocus(`id("port_number"));
        Report::Error(_("Port number already exists."));
        continue;
        }
        ports = add(ports, new_port);
        RelocationServer::SetLibvirtdPorts(ports);

        if (current_port != nil) DeletePort(current_port);
    }

    break;
    }

    UI::CloseDialog();
}

symbol HandleKVMConfigurationDialog (string id, map event) {
    any action = event["ID"]:nil;
    string selected_port = (string) UI::QueryWidget (`id("Port"), `CurrentItem);

    // Adding a new port
    if (action == "add_port") {
    AddEditPortDialog(nil);
    // Editing current port
    } else if (action == "edit_port") {
    AddEditPortDialog(selected_port);
    // Deleting current port
    } else if (action == "delete_port") {
    if (Confirm::DeleteSelected()) DeletePort (selected_port);
    } else if (action == "tunneled_migration" || action == "plain_migration")
    InitKVMFireWall();


    InitLibvirtdPortsTable();
    return nil;
}

void StoreKVMConfigurationDialog (string id, map event) {
    RelocationServer::SetModified();

    foreach (string key, ["tunneled_migration",
                        "plain_migration",
                        "default_port_range"], {
    boolean value = (boolean)UI::QueryWidget(`id(key), `Value);
    RelocationServer::SetLibvirtdOption(key, value);
    });
}

/* EOF */
}
