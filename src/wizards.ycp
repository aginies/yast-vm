/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/relocation-server/wizards.ycp
 * Package:	Configuration of relocation-server
 * Summary:	Wizards definitions
 * Authors:	Li Dongyang <lidongyang@novell.com>
 *
 * $Id: wizards.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "relocation-server";

import "Arch";
import "Sequencer";
import "Wizard";
import "CWM";
import "CWMTab";
import "CWMServiceStart";
import "CWMFirewallInterfaces";

include "relocation-server/complex.ycp";
include "relocation-server/dialogs.ycp";

/**
 * Main workflow of the relocation-server configuration
 * @return sequence result
 */
any MainSequence() {

    map <string, map <string, any> > widgets = $[
        "fw-xend" : CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
            "services" : [ "service:xend-relocation-server" ],
            "display_details" : true,
        ]),
        "xend" : $[
            "widget"            : `custom,
            "help"              : HELPS["xend_configuration"]:"",
            "custom_widget"     : XendConfigurationDialogContent(),
            "handle"            : HandleXendConfigurationDialog,
            "init"              : InitXendConfigurationDialog,
            "store"             : StoreXendConfigurationDialog,
        ],
        "kvm" : $[
            "widget"            : `custom,
            "help"              : HELPS["kvm_configuration"]:"",
            "custom_widget"     : KVMConfigurationDialogContent(),
            "handle"            : HandleKVMConfigurationDialog,
            "init"              : InitKVMConfigurationDialog,
            "store"             : StoreKVMConfigurationDialog,
        ],
        "fw-kvm" : CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
            "services" : [ "service:libvirtd-relocation-server", "service:sshd" ],
            "display_details" : true,
        ]),
    ];

    map <string, any> tabs = $[
        "xend_configuration" : $[
            "header" : _("&Xend"),
            "widget_names" : ["xend", "fw-xend"],
            "contents" : XendConfigurationDialogContent(),
        ],
        "kvm_configuration" : $[
            "header" : _("&KVM"),
            "widget_names" : ["kvm", "fw-kvm",],
            "contents" : KVMConfigurationDialogContent(),
        ],
    ];

    if ( !Arch::is_xen0() )
        remove(tabs, "xend_configuration");
    else
        remove(tabs, "kvm_configuration");

    map <string, any> wd_arg = $[
        "tab_order" : ["xend_configuration"],
        "tabs" : tabs,
        "widget_descr" : widgets,
        "initial_tab" : "xend_configuration",
    ];

    if ( !Arch::is_xen0() ) {
        wd_arg["tab_order"] = ["kvm_configuration"];
        wd_arg["initial_tab"] = "kvm_configuration";
    }

    map <string, any> wd = $[
        "tab" : CWMTab::CreateWidget (wd_arg),
    ];

    term contents = `VBox("tab");

    list <map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >) wd);

    string caption = _("Relocation Server Configuration");
    contents = CWM::PrepareDialog (contents, w);

    Wizard::SetContentsButtons (
        caption,
        contents,
        "",
        Label::BackButton (),
        Label::OKButton()
    );
    Wizard::HideBackButton ();
    Wizard::SetAbortButton(`abort, Label::CancelButton());
    Wizard::SetDesktopTitleAndIcon("relocation-server");

    return CWM::Run (w, $[`abort : ReallyExit]);
}

/**
 * Whole configuration of relocation-server
 * @return sequence result
 */
any RelocationServerSequence() {

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();
    Wizard::SetDesktopTitleAndIcon("relocation-server");

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/* EOF */
}
