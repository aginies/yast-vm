/**
 * Module:	uml_user_proposal.ycp
 *
 * Author:	Ladislav Slezak <lslezak@suse.cz>
 *
 * Purpose:     Proposal for uml user
 *
 * $Id: uml_user_proposal.ycp 17950 2004-06-22 14:19:36Z lslezak $
 *
 */

{
    textdomain "vm";

    import "VM";
    import "HTML";

    string func = (string) WFM::Args (0);
    map param = (map) WFM::Args (1);
    map ret = $[];

    if (func == "MakeProposal")
    {
	boolean force_reset      = param["force_reset"     ]:false;
	boolean language_changed = param["language_changed"]:false;

	if (force_reset)
	{
	    // reset user settings and propose new values
	    VM::ResetUserName();
	}

	string username = VM::GetUserName();
	string homedir = VM::GetHomeDir();
	list<string> proposal = [
	    // Proposal for uml user name
	    sformat (_("User Name: %1"), username),
	   // Proposal for home directory of uml user
	    sformat (_("Home Directory: %1"), homedir)
	];

	ret = $[ "preformatted_proposal" :
		 HTML::List (proposal)
	];

	if (username == nil || username == "" || homedir == nil || homedir == "")
	{
	    // don't allow to continue
	    ret = add(ret, "warning", _("User name or home directory is not valid."));
	    ret = add(ret, "warning_level", `blocker);
	}
    }
    else if (func == "AskUser")
    {
	boolean has_next = param["has_next"]:false;
	symbol result = (symbol) WFM::CallFunction ("inst_uml_user",
						    [true, has_next]);
	ret = $[ "workflow_sequence" : result ];
    }
    else if (func == "Description")
    {
	ret =  $[
	  // this is a heading
	  "rich_text_title"	:	_("User"),
	  // this is a menu entry
	  "menu_title"	:	_("&User"),
	  "id"		:	"uml_user_setting"
	];
    }

    return ret;
}
