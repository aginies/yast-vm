/**
 * Module:	inst_vm_options.ycp
 *
 * Authors:	Ladislav Slezak <lslezak@suse.cz>
 *
 * Purpose:	Ask the user for various options for the virtual machine.
 *
 * $Id:$
 *
 */

{
    textdomain "vm";

    import "VM";
    import "VM_Common";
    import "Wizard";
    import "Popup";
    import "String";

    // screen title for virtual machine options
    string title = _("The Virtual Machine Options");

    // build and show dialog

    Wizard::OpenAcceptDialog ();

    term contents = `HVSquash(
			      `VBox(
				    // textentry label - virtual machine name
				    `Left(`TextEntry(`id(`vmname), _("Machine &Name"), VM::GetConfigName())),
				    `VSpacing(0.5),
				    // textentry label - extra parameters for kernel
				    `Left(`TextEntry(`id(`bootopts), _("Boot &Options"), VM::GetExtraArgs())),
				    `VSpacing(0.5),
				    // textentry label - extra installation parameters for kernel
				    `Left(`TextEntry(`id(`bootinstopts), _("Additional Installation &Boot Options"), VM::GetExtraInstArgs())),
				    `VSpacing(0.5),
				    `Left(`ComboBox(`id(`memory), `opt(`editable),
						    // combobox label
						    _("&Memory Size in MB:"),
						    ["256", "512"])),
// SMP isn't currently supported
//
//				    `Left(`ComboBox(`id(`ncpus), `opt(`editable),
//						    // combobox label
//						    _("Number of CPUs:"),
//						    ["1", "2", "4"])),
				    `VSpacing(0.5),
				    `Left(`ComboBox(`id(`startmode),
						    // combobox label
						    _("A&ctivation"),
						    [
						     // combobox item
						     `item(`id("manual"), _("Manually")),
						     // combobox item
						     `item(`id("onboot"), _("On Boot")),
						     ])),
				    (VM::GetVMMtype() == "xen") ?
					`VBox(
					    `VSpacing(0.5),
					    `Left(`ComboBox(`id(`restart),
							    // combobox label
							    _("Re&start the Virtual Machine"),
							    [
							     // combobox item
							     `item(`id("always"), VM_Common::restart_mapping["always"]:"", VM::GetRestart() == "always"),
							     // combobox item
							     `item(`id("never"), VM_Common::restart_mapping["never"]:"", VM::GetRestart() == "never"),
							     // combobox item
							     `item(`id("onreboot"), VM_Common::restart_mapping["onreboot"]:"", VM::GetRestart() == "onreboot"),
							     ])
					    )
					)
				    :
					`Empty()
				    )
			      );

    // help text - virtual machine options
    string help_text = _("<P><B>Options</B></P>")
    + _("<P>Set how much host system memory will be used by the virtual machine.</P>")
    + _("<P>The virtual machine can be started automatically on boot or manually when needed.</P>")
    + _("<P><I>Boot Options</I> are used as extra arguments for the kernel.</P>")
    + _("<P>Use option 'root' (e.g. 'root=/dev/hda1') for root device configuration.</P>");

    Wizard::SetContents (title, contents, help_text, (boolean) WFM::Args(0),
			 (boolean) WFM::Args(1));

    UI::ChangeWidget (`id(`memory), `ValidChars, String::CDigit());
    UI::ChangeWidget (`id(`memory), `Value, tostring (VM::GetMemorySize()));

//    UI::ChangeWidget (`id(`ncpus), `ValidChars, "0123456789");
//    UI::ChangeWidget (`id(`ncpus), `Value, tostring (number_of_cpus));

    UI::ChangeWidget (`id(`startmode), `Value, VM::GetStartMode());

    // allow only 0-9, a-z, A-Z, and the characters _-.:+ in domain name
    UI::ChangeWidget (`id(`vmname), `ValidChars, String::CAlnum() + "_-.:+");

    // set widget state
    boolean enabled = (VM::GetVirtualizationType() == "para");
    if (!enabled)
    {
	UI::ChangeWidget(`id(`bootopts), `Enabled, enabled);
	UI::ChangeWidget(`id(`bootinstopts), `Enabled, enabled);
    }

    any ret = nil;

    while (true)
    {
	ret = Wizard::UserInput ();

	if (ret == `cancel || ret == `back)
	    break;

	if (ret == `next)
	{
	    integer mem = tointeger ((string) UI::QueryWidget (`id(`memory), `Value));
//	    integer tmp2 = tointeger ((string) UI::QueryWidget (`id(`ncpus), `Value));
	    string mode = (string) UI::QueryWidget (`id(`startmode), `Value);
	    string boot = (string) UI::QueryWidget (`id(`bootopts), `Value);
	    string bootinst = (string) UI::QueryWidget (`id(`bootinstopts), `Value);
	    string vmname = (string) UI::QueryWidget (`id(`vmname), `Value);

	    // error message: machine name must be unique, entered name is alreadu in use
	    string error = _("Machine name '%1' is already used.
Enter another name.");

	    if (mem == nil || mem <= 0)
	    {
		// error popup - entered wrong memory size
		string message = _("Invalid amount of memory.");
		Popup::Message (message);
		continue;
	    }
//	    TODO: else if (mem < available memory)

	    // error message: requested memory size is greater that available free memory
	    string memory_size_error = _("The requested memory size is larger than the amount of space currently available.
There is %1MB free memory available.");

	    VM::SetMemorySize(mem);
	    y2milestone("start mode: %1", mode);
	    VM::SetStartMode(mode);
	    VM::SetConfigName(vmname);
	    VM::SetExtraArgs(boot);
	    VM::SetExtraInstArgs(bootinst);

	    if (VM::GetVMMtype() == "xen") {
		string restart = (string) UI::QueryWidget (`id(`restart), `Value);
		VM::SetRestart(restart);
	    }

	    break;
	}
    }

    Wizard::CloseDialog ();

    return ret;
}
