/**
 * Module:	dom0_setup.ycp
 *
 * Authors:	Ladislav Slezak <lslezak@suse.cz>
 *
 * Purpose:	Configure domain0 (Xen management domain)
 *
 * $Id$
 */
{

    import "Package";
    import "Progress";
    import "Report";
    import "Bootloader";
    import "BootCommon";
    import "Popup";
    import "Wizard";
    import "Label";

    textdomain "vm";

    list <string> progress_stages = [
				     // progress stage
				     _("Install Packages"),
				     // progress stage
				     _("Configure Bootloader")
    ];

    list progress_descriptions = [];

    integer progress_length = size(progress_stages);

    // Headline for management domain installation
    string headline = _("Configuring the Management Domain (domain0)");

    // xen domain0 installation help text - 1/4
    string help_text = _("<P><big><B>Domain0 Configuration</B></big></P><P>Configuration
of the management domain (domain0) has two parts.</P>
") +

    // xen domain0 installation help text - 2/4
    _("<P>The required packages are installed into the system first. Then the
boot loader is switched to GRUB if it is not already used and the Xen section is
added to the boot loader menu if it is missing.</P>
") +

    // xen domain0 installation help text - 3/4
_("<P>GRUB is needed because it supports the multiboot standard required
to boot the Xen hypervisor and Linux kernel.</P>
") +

    // xen domain0 installation help text - 4/4
_("<P>When the configuration is successfully finished, it is possible to boot Xen from the boot loader menu.</P>");

    // error popup
    string error = _("An error occurred during installation.");
    // error popup
    string abortmsg = _("The installation will be aborted.");

    Wizard::OpenNextBackDialog();

    // enable progress
    boolean progress = Progress::set(true);

    // Headline for virtual machine installation
    Progress::New(headline, "", progress_length,
		   progress_stages, progress_descriptions, help_text);

    // package stage
    Progress::NextStage();

    list<string> packages = ["xen", "kernel-xen", "xen-tools", "xen-tools-ioemu"];
    boolean success = true;
    boolean bootloader_modified = false;


    // progressbar title - check whether Xen packages are installed
    Progress::Title(_("Checking packages..."));
    if (!Package::InstalledAll(packages))
    {
	// progressbar title - install the required packages
	Progress::Title(_("Installing packages..."));
	success = Package::InstallAll(packages);
    }

    if (!success)
    {
	// error popup
	Report::Error(_("Cannot install required packages.") + "\n" + abortmsg);
	return `abort;
    }

    // bootloader stage
    Progress::NextStage();

    // progressbar title - read bootloader settings
    Progress::Title(_("Reading boot loader configuration..."));

    // disable bootloader progress
    Progress::set(false);
    Bootloader::Read();
    Progress::set(true);

    // progressbar title - check whether GRUB or LILO is used as bootloader
    Progress::Title(_("Checking boot loader type..."));

    string loader_type = BootCommon::getLoaderType(false);
    string bootloader_changes = "";

    // false = don't recheck
    if (loader_type != "grub")
    {
	// progressbar title
	Progress::Title(_("Switching to GRUB boot loader..."));

	// set type to GRUB
	BootCommon::setLoaderType("grub");
	// summary text - item in the task list
	bootloader_changes = sformat(_("<LI>Switch to GRUB boot loader (current boot loader is '%1')</LI>"), loader_type);

	BootCommon::location_changed = true;
	BootCommon::changed = true;
    }

    // progressbar title - check if there is a Xen section
    Progress::Title(_("Searching for Xen section..."));

    // get all sections
    list sects = Bootloader::getSectionsList(`all);
    y2milestone("bootloader sections: %1", sects);

    if (!contains(sects, "XEN"))
    {
	// progressbar title - add missing Xen section to bootloader configuration
	Progress::Title(_("Adding Xen section..."));
	BootCommon::sections = add(BootCommon::sections, BootCommon::CreateLinuxSection("xen"));
	sects = Bootloader::getSectionsList(`all);
	y2milestone("bootloader sections: %1", sects);
	// summary text - item in the task list
	bootloader_changes = bootloader_changes + _("<LI>Add Xen section to the boot loader menu</LI>");
    }

    // confirm bootloader installation - dialog header
    if (bootloader_changes != "")
    {
	// progressbar title - write the modified bootloader configuration
	Progress::Title(_("Saving the boot loader configuration..."));

	bootloader_changes = bootloader_changes + _("<LI>Activate the new configuration</LI>");

	if (Popup::AnyQuestionRichText(_("Update of the Boot Loader Configuration"),
	    sformat(_("<P><B>These actions will be performed:</B><UL>%1</UL></P>"), bootloader_changes),
	    60, 10, Label::ContinueButton(), Label::CancelButton(), `yes_focus))
	{
	    // progressbar title - write the modified bootloader configuration
	    Progress::Title(_("Writing boot loader configuration..."));

	    Progress::set(false);
	    success = Bootloader::Write();
	    Progress::set(true);

	    if (!success)
	    {
		Report::Error(error);
		return `abort;
	    }
	}
	else
	{
	    return `abort;
	}
    }

    Progress::Finish();

    // popup message - ask user to reboot the machine into Xen kernel
    Popup::LongMessage(_("The machine is ready to start the Xen management domain.

Reboot the machine and select the Xen section in the boot loader menu to start it.
"));

    Wizard::CloseDialog();

    return `next;
}
