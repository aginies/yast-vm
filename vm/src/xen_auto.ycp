/**
 * File:
 *   xen_auto.ycp
 *
 * Package:
 *   Configuration of Xen virtual machine - AutoYaST client
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Ladislav Slez√°k <lslezak@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

{
    textdomain "vm";

    y2milestone("----------------------------------------");
    y2milestone("Xen auto started");

    import "VM_XEN";
    import "Summary";
    import "VM";

    // set virtualization type here
    VM::SetVMMtype("xen");

    any ret = nil;
    string func = "";
    map param = $[];

    /* Check arguments */
    if (size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
	func = (string) WFM::Args(0);
	if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	    param = (map) WFM::Args(1);
    }
    y2debug("func=%1", func);
    y2debug("param=%1", param);



    /* Create a  summary*/
    if (func == "Import") {
	ret = VM_XEN::Import(param);
    }
    /* Create a  summary*/
    else if (func == "Summary") {
	// don't show AutoYaST in the summary, in AutoYaST config mode it doesn't make sense
	map proposal = (map)WFM::CallFunction("xen_mode_proposal", ["MakeProposal", $["force_reset":false, "language_changed":false]]);
	string mode = proposal["preformatted_proposal"]:"";

	proposal = (map)WFM::CallFunction("vm_options_proposal", ["MakeProposal", $["force_reset":false, "language_changed":false]]);
	string options = proposal["preformatted_proposal"]:"";

	proposal = (map)WFM::CallFunction("vm_disks_proposal", ["MakeProposal", $["force_reset":false, "language_changed":false]]);
	string disks = proposal["preformatted_proposal"]:"";

	proposal = (map)WFM::CallFunction("vm_source_proposal", ["MakeProposal", $["force_reset":false, "language_changed":false]]);
	string source = proposal["preformatted_proposal"]:"";

	proposal = (map)WFM::CallFunction("vm_network_proposal", ["MakeProposal", $["force_reset":false, "language_changed":false]]);
	string network = proposal["preformatted_proposal"]:"";

	ret = "<P><BIG><B>" + _("Virtualization Mode") + "</B></BIG></P>" + mode
	    + "<P><BIG><B>" + _("Options") + "</B></BIG></P>" + options
	    + "<P><BIG><B>" + _("Disks") + "</B></BIG></P>" + disks
	    + "<P><BIG><B>" + _("Source") + "</B></BIG></P>" + source
	    + "<P><BIG><B>" + _("Network") + "</B></BIG></P>" + network;

	y2milestone("proposal: %1", ret);
    }
    else if (func == "GetModified") {
	ret = VM_XEN::GetModified();
    }
    else if (func == "SetModified") {
	VM_XEN::SetModified(true);
	ret = true;
    }
    /* Reset configuration */
    else if (func == "Reset") {
	// reset the configuration (propose new config)
	VM_XEN::resetConfigName();
	VM_XEN::resetMemorySize();
	VM_XEN::resetStartMode();
	VM_XEN::resetRestart();
	VM_XEN::resetExtraArgs();
	VM_XEN::resetHiddenArgs();
	VM_XEN::resetDiskConfig();
	VM_XEN::resetSourceConfig();
	VM_XEN::resetNetworkConfig();
	VM::ResetVirtualizationType();
	VM::ResetAutoYastProfile();

	ret = $[];
    }
    /* Change the configuration */
    else if (func == "Change") {
	ret = WFM::CallFunction("xen", [] );
    }
    /* Return required package list */
    else if (func == "Packages") {
	ret = $[];
    }
    /* Return actual state */
    else if (func == "Export") {
	ret = VM_XEN::Export();
    }
    else if (func == "Read") {
	ret = false;
	y2warning("Read handler is not implemented");
    }
    /* Write given settings */
    else if (func == "Write") {
	ret = false;
	y2warning("Write handler is not implemented");
    }
    /* Unknown function */
    else {
	y2error("Unknown function: %1", func);
	ret = false;
    }

    y2debug("ret=%1", ret);
    y2milestone("Xen auto finished");
    y2milestone("----------------------------------------");

    return ret;

    /* EOF */
}
